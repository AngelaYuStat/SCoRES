% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_cs.R
\name{plot_cs}
\alias{plot_cs}
\title{Plot inversion of simultaneous confidence intervals (SCIs) into inner and outer confidence sets (CSs)}
\usage{
plot_cs(
  SCB,
  levels,
  x,
  y,
  mu_hat,
  mu_true = NULL,
  together = T,
  xlab = "X1",
  ylab = "X2",
  level_label = T,
  min.size = 5,
  palette = "gray",
  color_level_label = "black"
)
}
\arguments{
\item{SCB}{A list returned by \code{SCB_dense()} or a custom list with two arrays: \code{scb_up} and \code{scb_low}, representing the upper and lower confidence bounds respectively.}

\item{levels}{A numeric vector of scalers specifying the levels to plot the cs.}

\item{x}{A vector of x-axis coordinates. For discrete coordinates, use a character vector.}

\item{y}{Optional vector of y-axis coordinates, required when the SCB array is 2D.}

\item{mu_hat}{A matrix or vector of estimated means. If \code{mu_true} is provided, this will be overwritten by the true mean.}

\item{mu_true}{Optional matrix or vector of true means, which overrides \code{mu_hat} if provided.}

\item{together}{Logical. If \code{TRUE}, plots all confidence levels on the same figure; otherwise, generates one plot per level.}

\item{xlab}{Character. Label for the x-axis.}

\item{ylab}{Character. Label for the y-axis.}

\item{level_label}{Logical. If \code{TRUE}, displays numeric level labels on contour lines for 2D confidence sets.}

\item{min.size}{Integer. Minimum number of points required for a contour to be labeled.}

\item{palette}{Character. Name of the HCL color palette to use when plotting multiple levels together (e.g., "Dynamic").}

\item{color_level_label}{Character. Color used for contour level labels (e.g., "black").}
}
\value{
A \code{ggplot2} object representing the inversion of simultaneous confidence intervals.
}
\description{
Visualizes 1D or 2D inversion of simultaneous confidence sets using contour or band plots.
Supports plotting CSs at multiple levels and labeling contours.
}
\examples{

# example using ccds data
data(ccds)
ccds_fpca <- prepare_ccds_fpca(ccds)

fosr_mod <- mgcv::bam(percent_change ~ s(seconds, k=30, bs="cr") +
  s(seconds, by = use, k=30, bs = "cr") +
  s(subject, by = Phi1, bs="re") +
  s(subject, by = Phi2, bs="re")+
  s(subject, by = Phi3, bs="re") +
  s(subject, by = Phi4, bs="re"),
  method = "fREML", data = ccds_fpca, discrete = TRUE)

ccds_cma <- SCB_functional_outcome(data = ccds_fpca, object = fosr_mod, method = "cma",
                                   est_mean = TRUE, outcome = "percent_change",
                                   time = "seconds", group_name = "use",
                                   group_value = 1, subject = "subject")
ccds_cma <- tibble::as_tibble(ccds_cma)

plot_cs(ccds_cma,levels = c(-7, -8, -9, -10), x = ccds_cma$time,
        mu_hat = ccds_cma$yhat, xlab = "", ylab = "",
        level_label = T, min.size = 40, palette = "Spectral",
        color_level_label = "black")
}
