% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional_outcome_scb.R
\name{SCB_functional_outcome}
\alias{SCB_functional_outcome}
\title{Construct Simultaneous Confidence Bands (SCB) For One Dimensional Functional Data Using Specified Methods}
\usage{
SCB_functional_outcome(
  data,
  object = NULL,
  method,
  est_mean = FALSE,
  alpha = 0.05,
  outcome,
  time,
  range = NULL,
  group_name,
  group_value,
  subject = NULL,
  nboot = NULL,
  method_SD = "t",
  weights = "rademacher"
)
}
\arguments{
\item{data}{A functional data frame, matrix or tibble.
The input data must have column names, and should contain the functional outcome, time and subject}

\item{object}{A fitted Function-on-Scalar Regression (FoSR) object (e.g., from mgcv::bam()/mgcv::gam()). Default is NULL.
If provided when \code{method = "wild"}, the mean estimation from the output of functional regression model wil be used to calculate the SCBs, instead of sample mean}

\item{method}{A character string specifying the approach:
\itemize{
\item \code{"cma"} - Correlation and Multiplicity Adjusted (CMA) confidence bands
via parametric approach (requires a fitted functional regression model)
\item \code{"wild"} - Dense confidence bands via Multiplier-t Bootstrap method
(requires raw data)
}}

\item{est_mean}{Logical. Whether to use the fitted mean from a functional regression model.
If \code{TRUE}, the function will use:
\itemize{
\item \strong{Fitted mean:} The estimated mean function from a fitted model (e.g., \code{mgcv::bam}).
Need to provide a fitted functional outcome regression model object. Otherwise, the sample mean will be calculated.
}
If \code{FALSE}, the function will instead use:
\itemize{
\item \strong{Sample mean:}
\deqn{\hat{\beta}(s) = \frac{1}{n} \sum_{i=1}^n \tilde{Y}_i(s)}
where \eqn{\tilde{Y}_i(s)} is a smoothed version of the observed functional response.
}
Default is \code{FALSE}.}

\item{alpha}{Significance level for SCB. Default is 0.05.}

\item{outcome}{A character string specifying the name of the outcome variable used in the model. Must be provided if choose \code{method = "wild"}.}

\item{time}{A character string specifying the name of the time variable used in the model.}

\item{range}{A numeric vector specifying the range or grid of time points interested. Defaut is the whole time points from the fitted model.}

\item{group_name}{A character vector that specifies the names of grouping scalar variables to analyze.}

\item{group_value}{A vector (numeric or character) that specifies the corresponding values of the variables listed in \code{group_name}.
Each entry in \code{group_value} should match the respective variable in \code{group_name}.}

\item{subject}{A character string specifying the name of the subject-level random effect variable.}

\item{nboot}{An integer specifying the number of bootstrap samples used to construct the confidence bands. Default is 10,000 for cma, 5000 for wild bootstrap.}

\item{method_SD}{Method for SD estimation: "t" or "regular". Default is "t".}

\item{weights}{Multiplier type: "rademacher", "gaussian", or "mammen". Default is "rademacher"."

For CMA bands (\code{method = "cma"}), please provide a pre-fitted functional regression model
For wild bootstrap bands (\code{method = "wild"}), the original input data is required.}
}
\value{
A list containing:
\item{yhat}{Estimated mean function for the group of interest.}
\item{time}{The time points used.}
\item{se_hat}{Standard errors of the estimated means.}
\item{scb_low}{Lower bound of the simultaneous confidence band.}
\item{scb_up}{Upper bound of the simultaneous confidence band.}
\item{type}{A character description of the output type.}
}
\description{
This function builds simultaneous confidence bands through two distinct approaches..
}
\examples{
# example using ccds data
data(ccds)
ccds_fpca <- prepare_ccds_fpca(ccds)

fosr_mod <- mgcv::bam(percent_change ~ s(seconds, k=30, bs="cr") +
  s(seconds, by = use, k=30, bs = "cr") +
  s(subject, by = Phi1, bs="re") +
  s(subject, by = Phi2, bs="re")+
  s(subject, by = Phi3, bs="re") +
  s(subject, by = Phi4, bs="re"),
  method = "fREML", data = ccds_fpca, discrete = TRUE)

# CMA approach
results <- SCB_functional_outcome(data = ccds, object = fosr_mod, method = "cma", est_mean = TRUE,
                       outcome = "percent_change", time = "seconds",
                       group_name = "use", group_value = 1, subject = "subject")


# Wild bootstrap
results <- SCB_functional_outcome(data = ccds, object = fosr_mod, method = "wild",
                       est_mean = TRUE, outcome = "percent_change",
                       time = "seconds", group_name = "use", group_value = 1, subject = "subject")


}
