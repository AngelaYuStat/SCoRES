devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
usethis::use_import_from("ggplot2", "ggplot")
usethis::use_import_from("ggplot2", "aes")
usethis::use_import_from("ggplot2", "geom_line")
usethis::use_import_from("ggplot2", "geom_hline")
usethis::use_import_from("ggplot2", "theme_minimal")
usethis::use_import_from("ggplot2", "labs")
devtools::document()
devtools::install()
devtools::install()
devtools::load_all()
devtools::check()
remove.packages("invSCI")
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
usethis::use_import_from("ggplot2", "theme")
usethis::use_import_from("grDevices", c("contourLines", "hcl.colors"))
usethis::use_import_from("graphics", "lines")
usethis::use_import_from("stats", c("as.formula", "binomial", "cov", "dnorm", "glm",
"model.frame", "qnorm", "rbinom", "rnorm", "runif", "sd",
"time", "var"))
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
usethis::use_import("ggplot2")
usethis::use_import_from("dplyr", "mutate")
devtools::document()
devtools::install()
devtools::load_all()
remove.packages("invSCI")
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
usethis::use_r("global")
usethis::use_package("mvtnorm", type = "Imports")
usethis::use_import_from("mvtnorm", "rmvnorm")
usethis::use_import_from("reshape", "melt")
usethis::use_import_from("dplyr", c("mutate", "desc"))
usethis::use_import_from("forcats"," fct_reorder")
usethis::use_import_from("forcats","fct_reorder")
devtools::document()
devtools::install()
devtools::load_all()
remove.packages("invSCI")
devtools::document()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
install.packages("covr")
library(devtools)
devtools::build_readme()
devtools::build_readme()
usethis::use_r("functional_outcome_scb")
coef_names <- c("(Intercept)", "s(time).1", "s(time).2", "s(time).3", "age")
smooth_terms <- grep("^s\\(([^)]+)\\)", coef_names, value = TRUE)
smooth_vars <- gsub("^s\\(([^)]+)\\).*", "\\1", smooth_terms)
smooth_vars <- unique(smooth_vars)
smooth_vars <- gsub("^s\\(([^)]+)\\).*", "\\1", smooth_terms)
data(ccds_fpca)
fosr_mod <- mgcv::bam(percent_change ~ s(seconds, k=30, bs="cr") +
s(seconds, by = use, k=30, bs = "cr") +
s(subject, by = Phi1, bs="re") +
s(subject, by = Phi2, bs="re")+
s(subject, by = Phi3, bs="re") +
s(subject, by = Phi4, bs="re"),
method = "fREML", data = ccds_fpca, discrete = TRUE)
object <- fosr_mod
coef_names <- names(mod_coef)
mod_coef <- object$coefficients
coef_names <- names(mod_coef)
smooth_terms <- grep("^s\\(([^)]+)\\)", coef_names, value = TRUE)
smooth_vars <- gsub("^s\\(([^)]+)\\).*", "\\1", smooth_terms)
smooth_vars
time <- unique(smooth_vars)[1]
pattern <- paste0("^\\(Intercept\\)$|^s\\(", time, "\\)\\.[0-9]+$")
pattern
idx <- grep(pattern, coef_names)
idx
coef_names
usethis::use_import_from("mgcv", "gam")
usethis::use_package("tidyr")
usethis::use_package("refund")
usethis::use_import_from("tidyr","pivot_wider")
usethis::use_import_from("refund","fpca.face")
usethis::use_import_from("dplyr", c("mutate", "desc", "filter", "select", "arrange", "left_join"))
library(readr)
# read csv
ccds_raw <- read_csv("D:/FDA/data/ccds1_functional.csv")
# select right eye and tp = post
ccds <- ccds_raw %>%
filter(eye == "Right", tp == "post") %>%
dplyr::select(subject_id, seconds, use, percent_change) %>%
mutate(subject = as.factor(subject_id)) %>%
mutate(use = as.numeric(use == "use")) %>%
#drop_na(use, percent_change) %>%
tibble()
# select right eye and tp = post
ccds <- ccds_raw %>%
filter(eye == "Right", tp == "post") %>%
dplyr::select(subject_id, seconds, use, percent_change) %>%
mutate(subject = as.factor(subject_id)) %>%
mutate(use = as.numeric(use == "use")) %>%
#drop_na(use, percent_change) %>%
tibble::as_tibble()
# save as .rda
usethis::use_data(ccds, overwrite = TRUE)
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
tional_outcome_scb")
devtools::document()
devtools::install()
devtools::load_all()
q()
)
}
.
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
usethis::use_testthat(3)
usethis::use_test("cma")
usethis::use_test("functional_outcome_scb")
usethis::use_test("MultiplierBootstrap")
usethis::use_test("plot_cs")
usethis::use_test("regression_outcome_scb")
usethis::use_test("SCB_dense")
usethis::use_test("scb_to_cs")
devtools::build_readme()
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
collapse = TRUE)
library(invSCI)
data(ccds)
ccds_fpca <- invSCI::prepare_ccds_fpca(ccds)
ccds_fpca <- invSCI::prepare_ccds_fpca(ccds)
fosr_mod <- mgcv::bam(percent_change ~ s(seconds, k=30, bs="cr") +
s(seconds, by = use, k=30, bs = "cr") +
s(subject, by = Phi1, bs="re") +
s(subject, by = Phi2, bs="re") +
s(subject, by = Phi3, bs="re") +
s(subject, by = Phi4, bs="re"),
method = "fREML", data = ccds_fpca, discrete = TRUE)
y_hat <- predict(fosr_mod)
y_hat
dim(y_hat)
length(y_hat)
32642/401
y_hat <- fosr_mod$fitted.values
subject<-"subject"
time<- "seconds"
outcome<-"percent_change"
data<-ccds
data_wide <- data %>%
select(all_of(c(subject, time, outcome))) %>%
pivot_wider(
names_from = !!sym(time),
values_from = !!sym(outcome),
names_prefix = "time_"
) %>%
select(-all_of(subject)) # every row is a subject
library(dplyr)
data_wide <- data %>%
select(all_of(c(subject, time, outcome))) %>%
pivot_wider(
names_from = !!sym(time),
values_from = !!sym(outcome),
names_prefix = "time_"
) %>%
select(-all_of(subject)) # every row is a subject
library(tudyr)
library(tidyr)
data_wide <- data %>%
select(all_of(c(subject, time, outcome))) %>%
pivot_wider(
names_from = !!sym(time),
values_from = !!sym(outcome),
names_prefix = "time_"
) %>%
select(-all_of(subject)) # every row is a subject
fpc_obj = fpca.face(as.matrix(data_wide))
library(refund)
fpc_obj = fpca.face(as.matrix(data_wide))
data_imputed <- data %>%
mutate(Yhat = as.vector(t(fpc_obj$Yhat)),
!!sym(outcome) := ifelse(is.na(.data[[outcome]]), Yhat, .data[[outcome]])
) %>%
select(-Yhat)
length(data_imputed[[outcome]])
any.NA(data_imputed[[outcome]])
anyNA(data_imputed[[outcome]])
load("D:/invSCI/inst/extdata/pupil.Rdata")
unique(use_group)
data(pupil)
unique(pupil$use_group)
# read Rdata
dat_path <- system.file("extdata", "pupil.Rdata", package = "invSCI")
load(dat_path)
pupil_raw <- pupil
# select right eye and tp = post
pupil <- pupil_raw %>%
mutate(id = as.factor(id)) %>%
mutate(gender = as.numeric(gender == "Female")) %>%
mutate(smoker = ifelse(user_cat %in% c("Daily - Concentrates", "Daily - Flower", "Occasional - Flower"), 1, 0)) %>%
mutate(Daily = ifelse(user_cat %in% c("Daily - Concentrates", "Daily - Flower"), 1, 0)) %>%
tibble::as_tibble()
library(dplyr)
# select right eye and tp = post
pupil <- pupil_raw %>%
mutate(id = as.factor(id)) %>%
mutate(gender = as.numeric(gender == "Female")) %>%
mutate(smoker = ifelse(user_cat %in% c("Daily - Concentrates", "Daily - Flower", "Occasional - Flower"), 1, 0)) %>%
mutate(Daily = ifelse(user_cat %in% c("Daily - Concentrates", "Daily - Flower"), 1, 0)) %>%
tibble::as_tibble()
# select right eye and tp = post
pupil <- pupil_raw %>%
mutate(id = as.factor(id)) %>%
mutate(gender = as.numeric(gender == "Female")) %>%
mutate(smoker = ifelse(user_group %in% c("Daily - Concentrates", "Daily - Flower", "Occasional - Flower"), 1, 0)) %>%
mutate(Daily = ifelse(user_group %in% c("Daily - Concentrates", "Daily - Flower"), 1, 0)) %>%
tibble::as_tibble()
# select right eye and tp = post
pupil <- pupil_raw %>%
mutate(id = as.factor(id)) %>%
mutate(gender = as.numeric(gender == "Female")) %>%
mutate(smoker = ifelse(use_group %in% c("Daily - Concentrates", "Daily - Flower", "Occasional - Flower"), 1, 0)) %>%
mutate(Daily = ifelse(use_group %in% c("Daily - Concentrates", "Daily - Flower"), 1, 0)) %>%
tibble::as_tibble()
# save as .rda
usethis::use_data(pupil, overwrite = TRUE)
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::load_all()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::load_all()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
data(pupil)
# read Rdata
dat_path <- system.file("extdata", "pupil.Rdata", package = "invSCI")
load(dat_path)
pupil_raw <- pupil
pupil <- pupil_raw %>%
mutate(id = as.factor(id)) %>%
mutate(gender = as.numeric(gender == "Female")) %>%
mutate(smoker = ifelse(use_group %in% c("Daily - Concentrates",
"Daily - Flower",
"Occasional - Flower"), 1, 0)) %>%
mutate(daily = ifelse(use_group %in% c("Daily - Concentrates",
"Daily - Flower"), 1, 0)) %>%
tibble::as_tibble()
# save as .rda
usethis::use_data(pupil, overwrite = TRUE)
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
data(ccds)
ccds_fpca <- prepare_ccds_fpca(ccds)
fosr_mod <- mgcv::bam(percent_change ~ s(seconds, k=30, bs="cr") +
s(seconds, by = use, k=30, bs = "cr") +
s(subject, by = Phi1, bs="re") +
s(subject, by = Phi2, bs="re")+
s(subject, by = Phi3, bs="re") +
s(subject, by = Phi4, bs="re"),
method = "fREML", data = ccds_fpca, discrete = TRUE)
time <- "seconds"
outcome <- "percent_change"
subject <- "subject"
library(tidyr)
library(dplyr)
data_wide <- data %>%
select(all_of(c(subject, time, outcome))) %>%
pivot_wider(
names_from = !!sym(time),
values_from = !!sym(outcome),
names_prefix = "time_"
) %>%
select(-all_of(subject)) # every row is a subject
data <- ccds
data_wide <- data %>%
select(all_of(c(subject, time, outcome))) %>%
pivot_wider(
names_from = !!sym(time),
values_from = !!sym(outcome),
names_prefix = "time_"
) %>%
select(-all_of(subject)) # every row is a subject
fpc_obj = fpca.face(as.matrix(data_wide))
data_imputed <- data %>%
mutate(Yhat = as.vector(t(fpc_obj$Yhat)),
!!sym(outcome) := ifelse(is.na(.data[[outcome]]), Yhat, .data[[outcome]])
) %>%
select(-Yhat)
data <- data %>%
mutate(Yhat = as.vector(t(fpc_obj$Yhat)),
!!sym(outcome) := ifelse(is.na(.data[[outcome]]), Yhat, .data[[outcome]])
) %>%
select(-Yhat)
anyNA(data)
library(readr)
library(dplyr)
# read Rdata
dat_path <- system.file("extdata", "pupil.Rdata", package = "invSCI")
load(dat_path)
pupil_raw <- pupil
pupil <- pupil_raw %>%
mutate(id = as.factor(id)) %>%
mutate(gender = as.numeric(gender == "Female")) %>%
tibble::as_tibble()
pupil <- pupil %>%
filter(!(id %in% c("003-1068", "003-112")))
# save as .rda
usethis::use_data(pupil, overwrite = TRUE)
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
# create_package(here::here("invSCI"))
# git init
library(devtools)
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
usethis::use_import_from("reshape","melt")
usethis::use_import_from("Matrix","as.matrix")
usethis::use_import_from("Matrix","bdiag")
usethis::use_import_from("reshape","melt")
load(here::here("inst", "extdata", "climate_data.dat"))
# read .dat file
dat_path <- system.file("extdata", "climate_data.dat", package = "invSCI")
mask = mask * ifelse(orog>0, 1, NA)
#Define the t vectors and n.
ta = current
ta = ta - mean(ta)
tb = future
tb = tb - mean(tb)
na = length(ta)
nb = length(tb)
n = na + nb
#Define Design matrix X.
X1 = c(rep(0,na),rep(1,nb))
X2 = rep(1,n)
X3 = c(ta,rep(0,nb))
X4 = c(rep(0,na),tb)
X = cbind(X1,X2,X3,X4)
#Define the data Y.
Y = array(0,c(length(lon),length(lat),n))
for(j in 1:na) Y[,,j] = summer[,,j,1]
for(j in 1:nb) Y[,,na+j] = summer[,,j,2]
#for(j in 1:na) Y[,,j] = winter[,,j,1]
#for(j in 1:nb) Y[,,na+j] = winter[,,j,2]
Z = list(x = lon, y = lat, z = Y)
correlation = "corAR1"
climate_data <- list(Z = Z, mask = mask, X = X, correlation = correlation)
attach(temp)
mask = mask * ifelse(orog>0, 1, NA)
#Define the t vectors and n.
ta = current
ta = ta - mean(ta)
tb = future
tb = tb - mean(tb)
na = length(ta)
nb = length(tb)
n = na + nb
#Define Design matrix X.
X1 = c(rep(0,na),rep(1,nb))
X2 = rep(1,n)
X3 = c(ta,rep(0,nb))
X4 = c(rep(0,na),tb)
X = cbind(X1,X2,X3,X4)
#Define the data Y.
Y = array(0,c(length(lon),length(lat),n))
for(j in 1:na) Y[,,j] = summer[,,j,1]
for(j in 1:nb) Y[,,na+j] = summer[,,j,2]
#for(j in 1:na) Y[,,j] = winter[,,j,1]
#for(j in 1:nb) Y[,,na+j] = winter[,,j,2]
Z = list(x = lon, y = lat, z = Y)
correlation = "corAR1"
climate_data <- list(Z = Z, mask = mask, X = X, correlation = correlation)
usethis::use_data(climate_data, overwrite = TRUE)
usethis::use_r("data_climate")
current
future
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
# 搜索是否调用了 abind 或 mvtnorm 的函数
grep("abind", list.files("R", full.names = TRUE), value = TRUE)
grep("mvtnorm", list.files("R", full.names = TRUE), value = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
